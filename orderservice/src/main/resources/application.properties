spring.datasource.url=jdbc:mysql://localhost:3306/orderservice
spring.datasource.username=root
spring.datasource.password=TEAMS@2020*11
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl.auto=create
spring.jpa.generate-ddl=true
#spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
server.port=8089
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

#we want all kind of endpoints to be exposed from our actuator not only health metrics end points
management.health.circuitbreakers.enabled=true
#want complete health details of the application
management.endpoints.web.exposure.include=*
management.endpoints.health.show-details=always

#Resilience4j properties
#want different states of circuit breaker(ex: closed, open and half-open)
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#it is the number of requests to fail before it changes state, ex: closed to open
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
#time duration to wait in open state before going to half open state
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
#how many calls that we can allow in half open state before going to open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
#Automatically transitioning from Open To HalfOpenEnabled
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true


#Resilience4j Timeout Properties
resilience4j.timelimiter.instances.inventory.timeout-duration=10s

#Resilience4j Retry Properties
resilience4j.circuitbreaker.instances.inventory.max-attempts=3
resilience4j.circuitbreaker.instances.inventory.wait-duration=5s

#spring.zipkin,base-url=http://localhost:9411
#spring.sleuth.sampler.probability=1.0
#
#Kafka properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=notificationTopic
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.microservice.OrderService.event.OrderPlacedEvent