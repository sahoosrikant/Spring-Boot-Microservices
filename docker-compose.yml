---
version: '3'
services:
  ## MySQL Docker Compose Config
  mysql-order:
    container_name: mysql-order
    image: mysql
    environment:
      MYSQL_DATABASE: orderservice
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: TEAMS@2020*11
    volumes:
      - ./mysql-order:/var/lib/mysql
    ports:
      - "3307:3306"
    restart: unless-stopped

  mysql-inventory:
    container_name: mysql-inventory
    image: mysql
    environment:
      MYSQL_DATABASE: inventoryservice
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: TEAMS@2020*11
    volumes:
      - ./mysql-inventory:/var/lib/mysql
    ports:
      - "3308:3306"
    restart: unless-stopped

  mysql-product:
    container_name: mysql-product
    image: mysql
    environment:
      MYSQL_DATABASE: productservice
      MYSQL_ROOT_USER: root
      MYSQL_ROOT_PASSWORD: TEAMS@2020*11
    volumes:
      - ./mysql-product:/var/lib/mysql
    ports:
      - "3309:3306"
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  ## Zipkin
#  zipkin:
#    image: openzipkin/zipkin
#    container_name: zipkin
#    ports:
#      - "9411:9411"

  ## Eureka Server
  discovery-server:
    image: srikant1998/discoveryservice:1.7
    container_name: discovery-server
    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin

  api-gateway:
    image: srikant1998/apigateway:1.7
    container_name: api-gateway
    pull_policy: always
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
#      - zipkin
      - discovery-server
#      - keycloak

  ## Product-Service Docker Compose Config
  product-service:
    container_name: product-service
    image: srikant1998/productservice:1.7
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - mysql-product
      - discovery-server
      - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: srikant1998/orderservice:1.7
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-order:3306/orderservice
    depends_on:
      - mysql-order
      - broker
#      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: srikant1998/inventoryservice:1.7
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-inventory:3306/inventoryservice
    depends_on:
      - mysql-inventory
      - discovery-server
      - api-gateway

  ## Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    image: srikant1998/notificationservice:1.7
    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
#      - zipkin
      - broker
      - discovery-server
      - api-gateway

  ## Prometheus
  prometheus:
    image: prom/prometheus:v2.37.1
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    depends_on:
      - product-service
      - inventory-service
      - order-service
      - notification-service

  grafana:
    image: grafana/grafana-oss:8.5.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password